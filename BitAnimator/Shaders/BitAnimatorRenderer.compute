
// Copyright © 2021 Leviant. 
// E-mail: leviant@yandex.ru  
// Discord: Leviant#8796
// My Discord server: https://discord.gg/MdykFMf
// PayPal: https://paypal.me/LeviantTech
// License: http://opensource.org/licenses/MIT
// Version: 1.3 (01.10.2021)

//#pragma enable_d3d11_debug_symbols
#pragma kernel SaveTextureR
#pragma kernel SaveTextureRGBA
#pragma kernel MergeTexturesR
#pragma kernel RenderBars
#pragma kernel DrawHistogram
#pragma kernel RenderSpectrumKernel
#pragma kernel VisualizeBPM
#pragma kernel DrawHistogramVolume

#define TILE_DIM 32
#define BLOCK_ROWS 8
#define MAX_WORKSIZE 1024

#include "Utils.hlsl"

Buffer<float> _Input;
Texture2D<float> _Texture0_R;
Texture2D<float> _Texture1_R;
RWTexture2D<float4> _RenderTexture;
RWTexture2D<float> _RenderTexture_R;

uniform uint3 _GridSize;
uniform uint _N;
uniform uint3 _GridOffset;
uniform uint _FFTWindow;
uniform uint _Frequency;
uniform uint _Multisamples;
uniform uint _BPM;
uniform float _Scale;
uniform float _Time;
uniform float _BeatOffset;
uniform float _LowFrequency;
uniform float _HighFrequency;

[numthreads(64, 1, 1)]
void SaveTextureRGBA(uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 localID : SV_GroupThreadID)
{
	_RenderTexture[id.xy] = _Input[id.y * _GridSize.x + id.x + _GridOffset.x] * _Scale;
}

[numthreads(64, 1, 1)]
void SaveTextureR(uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 localID : SV_GroupThreadID)
{
	_RenderTexture_R[id.xy] = _Input[id.y * _GridSize.x + id.x + _GridOffset.x] * _Scale;
}

[numthreads(64, 1, 1)]
void MergeTexturesR(uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 localID : SV_GroupThreadID)
{
	if(id.x < _GridSize.x && id.y < _GridSize.y)
		_RenderTexture_R[id.xy] = _Texture0_R[id.xy];
	else
		_RenderTexture_R[id.xy] = _Texture1_R[id.xy - _GridSize.xy];
}

[numthreads(256, 1, 1)]
void VisualizeBPM(uint3 id : SV_DispatchThreadID, uint localID : SV_GroupIndex)
{
	const uint BPM_Count = 256;
	float n = (float)BPM_Count / _GridSize.x;
	uint bar = floor(id.x * n);
	uint samples = ceil(n);
	float volume = 0;
	for (uint i = 0; i < samples; i++)
		volume += _Input[bar + i];
	volume = volume / samples;
	//float phase = _Input[id.x * 2 / n + 1];
	float2 pos = id.xy;
	pos /= _GridSize.xy;
	/*if (_N & LogAmplitude)
	{
		volume = (log10(volume) + 4.0) / 4.0;
	}*/
	float4 color = float4(0, 0, 0, 1);
	if (volume > pos.y)
		color.r = 0.5;
	/*if (phase < 0 && pos.y < 0.5)
		color.b = 0.5 * volume;
	else if (phase > 0 && pos.y > 0.5)
		color.b = 0.5 * volume;*/
	//else
	//	color.rgb = float4(0, 0, 0, 1);
	_RenderTexture[id.xy] = color;
}

[numthreads(8, 8, 1)]
void DrawHistogram(uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 localID : SV_GroupThreadID)
{
	const uint LogFrequency = 1;
	const uint LogAmplitude = 2;
	const uint EnergyCorrection = 4;
	const uint CalculateFons = 8;
	uint bins = _FFTWindow / 2;
	float n = (float)bins / _GridSize.x;
	uint bar = floor(id.x * n);
	uint samples = ceil(n);
	float v = 0;
	for (uint i = 0; i < samples; i++)
		v += _Input[_GridOffset.y * bins + bar + i];
	v /= samples;

	float2 pos = id.xy;
	float volume = v;
	if (_N & LogAmplitude)
	{
		volume = (log10(volume) + _Scale) / _Scale;
	}
	else
		volume *= _Scale;
	float hzPerBin = (float)_Frequency / _FFTWindow;
	if(_N & LogFrequency)
	{
		//bar = exp2(bar * log2(bins) / bins) - 1;
		float x = (float)bar / bins; // normalized Hz
		bar = floor(bins * x * exp2(6.9 * (x - 1.0)));
	}
	
	bool leftBorder = (int)bar < floor(_LowFrequency / hzPerBin);
	bool rightBorder = (int)bar >= ceil(_HighFrequency / hzPerBin);
	float3 color = 0;
	if (volume * _GridSize.y > pos.y)
		color = float3(0.0, 0.7, 0.0);

	if (leftBorder || rightBorder)
		color = lerp(color, float3(0.5, 0.0, 0.0), 0.3);

	_RenderTexture[id.xy] = float4(color, 1);
}
/*
float4 getTexel(Texture2D tex, sampler s,float2 p)
{
	p = p * myTexResolution + 0.5;

	vec2 i = floor(p);
	vec2 f = p - i;
	f = f * f * f * (f * (f * 6.0 - 15.0) + 10.0);
	p = i + f;

	p = (p - 0.5) / myTexResolution;
	return s.Sample(tex, p);
}
*/

[numthreads(8, 8, 1)]
void RenderBars(uint3 id : SV_DispatchThreadID, uint localID : SV_GroupIndex)
{
	const uint LogFrequency = 1;
	const uint LogAmplitude = 2;
	const uint EnergyCorrection = 4;
	const uint CalculateFons = 8;
	const uint SpectrumEnegry = 2048;
	//_GridSize.z = bars
	//_GridOffset.y = offset in samples for _Input
	float2 pos = (float2)id.xy / _GridSize.xy;
	float timeLength = (float)_GridSize.z * _FFTWindow / _Multisamples / _Frequency;
	float startTime = _Time - timeLength / 2.0;
	float timePerBar = timeLength / _GridSize.z;
	float timePerPixel = timeLength / _GridSize.x;
	float timeInPixel = id.x * timePerPixel + startTime;
	float fBar = timeInPixel / timePerBar - (_GridOffset.y + 0.5*_FFTWindow) * _Multisamples / _FFTWindow + 0.5 / _Multisamples;
	float n = (float)_GridSize.z / _GridSize.x;
	uint bar = floor(fBar);
	uint samples = ceil(n);
	float volume = 0;
	if (fBar >= 0)
	{
		for (uint i = 0; i < samples; i++)
			volume += _Input[bar + i];
		volume /= samples;
	}

	[branch] if (_N & LogAmplitude)
	{
		volume = (log10(volume) + _Scale) / _Scale;
	}
	else
		volume *= _Scale;
	float3 color;
	
	
	[branch] if (_N & SpectrumEnegry)
	{
		float r = volume * 4.0 - 1.0;
		float g = max(1.5 - abs(4.0 * volume - 1.5), 4.0 * volume - 3.0);
		float b = abs(4.0 * volume - 2.0) - 1.0;
		color = saturate(float3(r, g, b));
	}
	else
		color = 1.0;

	float beatsPerSec = _BPM / 60.0;
	float timeLeftPixel = id.x * timePerPixel - timePerPixel + startTime;
	int beatNumLeft = floor((timeLeftPixel - _BeatOffset) * beatsPerSec);
	int beatNum = floor((timeInPixel - _BeatOffset) * beatsPerSec);

	if (volume > abs(pos.y - 0.5) * 2.0)
		color = color;
	else if (abs(volume) > abs(pos.y - 0.5) * 2.0)
		color = float3(0, 0, 1);
	else if(beatNumLeft < beatNum)
		color = float3(0.25, 0.25, 0.25);
	else 
		color = float3(0, 0, 0);

	//color *= timeInPixel < _Time ? 1.0 : 0.25;
	if (_GridSize.x / 2 == id.x)
		color = 1.0 - color;

	_RenderTexture[id.xy] = float4(color, 1.0);
}

[numthreads(8, 8, 1)]
void RenderSpectrumKernel(uint3 id : SV_DispatchThreadID, uint localID : SV_GroupIndex)
{
	//_GridSize.xy - render texture width and height
	//_GridSize.z = bars
	//_GridOffset.y = offset in samples for _Input
	float timeLength = (float)_GridSize.z * _FFTWindow / _Multisamples / _Frequency;
	float startTime = _Time - timeLength / 2.0;
	float timePerBar = timeLength / _GridSize.z;
	float timePerPixel = timeLength / _GridSize.x;
	float timeInPixel = id.x * timePerPixel + startTime;
	float fChunk = timeInPixel / timePerBar - (_GridOffset.y + 0.5 * _FFTWindow) * _Multisamples / _FFTWindow + 0.5 / _Multisamples;
	uint chunk = floor(fChunk);
	uint bins = _FFTWindow / 2;
	float n = (float)bins / _GridSize.y;
	uint bar = floor(id.y * n);
	uint samples = ceil(n);
	float volume = 0;
	for (uint i = 0; i < samples; i++)
		volume += _Input[chunk * bins + bar + i];
	volume /= samples;
	
	float3 color;
	const uint LogAmplitude = 2;
	if (_N & LogAmplitude)
	{
		volume = (log10(volume) + 5) / 4;
	}
	else
		volume *= _Scale;
	const uint SpectrumEnegry = 2048;
	[branch] if (_N & SpectrumEnegry)
	{
		//float r = volume * 4.0 - 1.0;
		//float g = max(1.5 - abs(4.0 * volume - 1.5), 4.0 * volume - 3.0);
		//float b = abs(4.0 * volume - 2.0) - 1.0;

		float r = volume * 5.0 - 2.0;
		float g = max(1.5 - abs(5.0 * volume - 2.5), 5.0 * volume - 4.0);
		float b = max(1.0 - abs(5.0 * volume - 1.0), 5.0 * volume - 4.0);
		color = saturate(float3(r, g, b));
	}
	else
		color = volume;
	float hzPerBin = (float)_Frequency / _FFTWindow;
	const uint LogFrequency = 1;
	if (_N & LogFrequency)
	{
		float x = (float)bar / bins; // normalized Hz
		bar = floor(bins * x * exp2(6.9 * (x - 1.0)));
	}
	  
	bool leftBorder = (int)bar < floor(_LowFrequency / hzPerBin);
	bool rightBorder = (int)bar >= ceil(_HighFrequency / hzPerBin);
	int fixedX = floor(timeInPixel / timePerPixel);
	if (leftBorder || rightBorder)
		//if (abs(fixedX + id.y) % 2 == 0 && abs(fixedX - id.y) % 2 == 0)
			color = lerp(color, float3(0.5, 0.0, 0.0), 0.5);

	//color *= timeInPixel < _Time ? 1.0 : 0.25;
	if (_GridSize.x / 2 == id.x)
		color = 1.0 - color;
	_RenderTexture[id.xy] = float4(color, 1.0);
}

groupshared float fons[64];

[numthreads(1, 64, 1)]
void DrawHistogramVolume(uint3 coord : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 localID : SV_GroupThreadID, uint index : SV_GroupIndex)
{
	if (index < 64)
	{
		uint w = _FFTWindow / 2;
		float n = float(w) / _GridSize.x;
		float k = log2(w) / w;
		float start = exp2(coord.x * n * k) - 1.0;
		float end = exp2((coord.x * n + n) * k) - 1.0;
		uint max_samples = ceil(end - start);
		//uint base = (_GridOffset.y + coord.y) * w + trunc(start);
		fons[index] = 0;
		float hzPerBin = float(_Frequency) / _FFTWindow;
		for (uint s = 0; s < max_samples; s++)
		{
			uint x = trunc(start) + s;
			uint i = (_GridOffset.y + index) * w + x;
			//v.x += getFons_LUT(float(x) / w, _Input[i.x]);
			//v.y += getFons_LUT(float(x) / w, _Input[i.y]);
			fons[index] += getFons(x * hzPerBin, _Input[i]);
		}
		fons[index] = fons[index] * 10.0 / max_samples;
	}
	GroupMemoryBarrierWithGroupSync();

	float volume = lerp(fons[0], fons[1], frac(_Time)) * _Scale;
	if (volume * _GridSize.y > float(coord.y))
		_RenderTexture[coord.xy] = float4(0, 0.7, 0, 1);
	else
		_RenderTexture[coord.xy] = float4(0, 0, 0, 1);
}
